### ส่วนประกอบของโค้ด

1. **ไลบรารีที่ใช้**
   - `AirGradient.h`: ใช้สำหรับการทำงานกับเซนเซอร์วัดคุณภาพอากาศ (PM2.5, CO2, อุณหภูมิ, ความชื้น)
   - `ESP8266WiFi.h`: ใช้สำหรับการเชื่อมต่อ WiFi บนบอร์ด ESP8266
   - `ESP8266HTTPClient.h`: ใช้สำหรับส่ง HTTP request ไปยังเซิร์ฟเวอร์
   - `Wire.h`: ใช้สำหรับการสื่อสารผ่าน I2C
   - `SSD1306Wire.h`: ใช้สำหรับการแสดงผลบนจอ OLED ที่ใช้ชิป SSD1306

2. **ตัวแปรและค่าคงที่**
   - `hasPM`, `hasCO2`, `hasSHT`: ใช้เพื่อตรวจสอบว่าเซนเซอร์แต่ละตัวถูกพบและใช้งานได้หรือไม่
   - `inUSaqi`, `inF`: ใช้สำหรับการตั้งค่าการแสดงผล (เช่น แสดงค่า AQI แบบ US หรือแสดงอุณหภูมิในหน่วยฟาเรนไฮต์)
   - `ssid`, `password`: ใช้สำหรับการเชื่อมต่อ WiFi
   - `serverName`: URL ของเซิร์ฟเวอร์ที่ใช้สำหรับส่งข้อมูล
   - `previousMillis`, `interval`: ใช้สำหรับการตั้งค่าการส่งข้อมูลทุกๆ 10 วินาที

3. **ฟังก์ชัน `setup()`**
   - เริ่มต้นการทำงานของ Serial communication
   - เริ่มต้นการทำงานของจอ OLED
   - เริ่มต้นการทำงานของเซนเซอร์ต่างๆ (SHT, CO2, PMS5003)
   - เชื่อมต่อ WiFi

4. **ฟังก์ชัน `loop()`**
   - ตรวจสอบเวลาและอ่านค่าจากเซนเซอร์ทุกๆ 10 วินาที
   - แสดงค่าที่อ่านได้บนจอ OLED
   - ส่งข้อมูลไปยังเซิร์ฟเวอร์ผ่าน HTTP request

5. **ฟังก์ชัน `sendDataToServer()`**
   - สร้าง URL สำหรับส่งข้อมูลไปยังเซิร์ฟเวอร์
   - ส่ง HTTP GET request ไปยังเซิร์ฟเวอร์
   - ตรวจสอบและแสดงผลการตอบกลับจากเซิร์ฟเวอร์

6. **ฟังก์ชัน `showTextRectangle()`**
   - แสดงข้อความบนจอ OLED

7. **ฟังก์ชัน `PM_TO_AQI_US()`**
   - คำนวณค่า AQI (Air Quality Index) จากค่า PM2.5

### วิธีการทำงานของโค้ด

1. **การตั้งค่าเริ่มต้น (`setup()`)**
   - โค้ดเริ่มต้นด้วยการตั้งค่าต่างๆ เช่น การเริ่มต้น Serial communication, การตั้งค่าจอ OLED, และการตรวจสอบเซนเซอร์ต่างๆ
   - หากเซนเซอร์ถูกพบและใช้งานได้ ตัวแปร `hasPM`, `hasCO2`, `hasSHT` จะถูกตั้งค่าเป็น `true`
   - โค้ดจะพยายามเชื่อมต่อ WiFi ด้วย SSID และรหัสผ่านที่กำหนดไว้

2. **การทำงานหลัก (`loop()`)**
   - โค้ดจะตรวจสอบเวลาและอ่านค่าจากเซนเซอร์ทุกๆ 10 วินาที
   - ค่าที่อ่านได้จะถูกแสดงบนจอ OLED และส่งไปยังเซิร์ฟเวอร์ผ่าน HTTP request
   - หากมีการเชื่อมต่อ WiFi ข้อมูลจะถูกส่งไปยังเซิร์ฟเวอร์โดยใช้ฟังก์ชัน `sendDataToServer()`

3. **การส่งข้อมูลไปยังเซิร์ฟเวอร์ (`sendDataToServer()`)**
   - โค้ดจะสร้าง URL ที่ประกอบด้วยข้อมูลที่อ่านได้จากเซนเซอร์ (เช่น ค่า PM2.5, CO2, อุณหภูมิ, ความชื้น)
   - ส่ง HTTP GET request ไปยังเซิร์ฟเวอร์และตรวจสอบการตอบกลับ

4. **การแสดงผลบนจอ OLED (`showTextRectangle()`)**
   - โค้ดจะแสดงค่าที่อ่านได้จากเซนเซอร์บนจอ OLED โดยมีการหน่วงเวลา 4 วินาทีก่อนที่จะล้างหน้าจอ

5. **การคำนวณค่า AQI (`PM_TO_AQI_US()`)**
   - โค้ดจะคำนวณค่า AQI จากค่า PM2.5 โดยใช้สูตรที่กำหนดไว้

### สรุป
โค้ดนี้ทำงานโดยการอ่านค่าจากเซนเซอร์วัดคุณภาพอากาศ (PM2.5, CO2, อุณหภูมิ, ความชื้น) และส่งข้อมูลที่ได้ไปยังเซิร์ฟเวอร์ออนไลน์ทุกๆ 10 วินาที นอกจากนี้ยังมีการแสดงผลข้อมูลบนจอ OLED เพื่อให้ผู้ใช้สามารถดูค่าที่วัดได้ในเวลาจริง